// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
	"kratos-client/internal/biz"
	"kratos-client/internal/conf"
	"kratos-client/internal/data"
	"kratos-client/internal/server"
	"kratos-client/internal/service"
)

import (
	_ "go.opentelemetry.io/otel/attribute"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger, traceTracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	userClient := data.NewUserServiceClient(traceTracerProvider, discovery)
	dataData, cleanup, err := data.NewData(confData, logger, userClient)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase, logger, traceTracerProvider)
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	userService := service.NewUserService(userUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, greeterService, userService, logger, traceTracerProvider)
	grpcServer := server.NewGRPCServer(confServer, greeterService, logger, traceTracerProvider)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
